#!/bin/bash

set -euo pipefail

#=============================================================================
# setup notes
# -----------
# - before running anything, do the following in order:
#   1) build the simulator with `buildsim_gemmini`
#   2) rebuild the workloads with `buildworkload_gemmini`
#=============================================================================
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
SW_DIR="$(dirname "$DIR")"
FCFG_DIR="$SW_DIR/firesim-configs"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
source "$DIR/.common.sh"

# set simulator dirs
VCS_DIR="$CY_DIR/sims/vcs"
VERILATOR_DIR="$CY_DIR/sims/verilator"
FIRESIM_DIR="$CY_DIR/sims/firesim"
SPIKE_DIR="$CY_DIR/sims/spike"

# general simulator options (vcs, verilator)
HW_CONFIG_PROJECT=example
HW_CONFIG_LAB3=GemminiEE290Lab3RocketConfig
HW_CONFIG_G2=Gemmini2EE290Lab3RocketConfig

# gemmini2 DSEs
HW_CONFIG_G2_DSE1=Gemmini2dim16sp64acc16bus064
HW_CONFIG_G2_DSE2=Gemmini2dim16sp16acc64bus064
HW_CONFIG_G2_DSE3=Gemmini2dim32sp16acc64bus064
HW_CONFIG_G2_DSE4=Gemmini2dim32sp16acc64bus064
HW_CONFIG_G2_DSE5=Gemmini2dim16sp64acc16bus128
HW_CONFIG_G2_DSE6=Gemmini2dim32sp64acc16bus128
HW_CONFIG_G2_DSE7=Gemmini2dim16sp16acc64bus128
HW_CONFIG_G2_DSE8=Gemmini2dim32sp16acc64bus128

# workloads (vcs, verilator)
TEST_0=echo
TEST_1=padded
TEST_2=tiled_matmul_ws
TEST_3=template
TEST_4=large_matmul
TEST_5=large_matmul_without_cpu
TEST_6=very_large_matmul
TEST_7=cifar_quant
TEST_8=mobilenet
TEST_9=resnet50
TEST_10=gemm

# firesim configs (workload and simulator)
HWDB_CONFIG="$FCFG_DIR/config_hwdb.ini"
FSIM_RT_LAB3_ORIG="$FCFG_DIR/config_runtime__lab3__orig_tiler.ini"
FSIM_RT_LAB3_FSM="$FCFG_DIR/config_runtime__lab3__fsm_tiler.ini"
FSIM_RT_LAB3_HW="$FCFG_DIR/config_runtime__lab3__hw_tiler.ini"

#=============================================================================
# defaults
#=============================================================================
# SW_PLATFORM: baremetal, pk
SW_PLATFORM="pk"

# SW_MODES: hw_tiler, orig_tiler, fsm_tiler
SW_MODE="orig_tiler"
SPIKE_EXT="gemmini"

# HW_CONFIG: lab3
HW_CONFIG="hw_lab3"
HW_CONFIG_FULL="$HW_CONFIG_LAB3"

# HW_SIM: spike, vcs, verilator, firesim
HW_SIM="spike"

# HW_SIMULATOR options
IS_NOISY=0
IS_VERBOSE=0
IS_DEBUG=0
IS_DEBUGGER=0

# TRACE_TYPE: none, vcd_full, vcd_mesh, vpd_full, fst_full
TRACE_TYPE="none"
TRACE_START="0"

WORKLOAD_ARGS=""
MAX_CYCLES=-1

#=============================================================================
# subroutines
#=============================================================================
display_usage() {
cat <<EOF

  runsim_gemmini [options] <workload1> [options] [<workload2> ...]
  ------------------------------------------------
  Utility to run simulators with different workloads. All logs will
  go in the respective chipyard/sims/<simultor>/logs directory. Firesim
  parameterization is unique from spike and vcs/verilator. And spike
  parameterization is different than vcs/verilator.
  
  spike/verilator/vcs workloads
  -----------------------------
  0:  $TEST_0 
  1:  $TEST_1 
  2:  $TEST_2 
  3:  $TEST_3 
  4:  $TEST_4 
  5:  $TEST_5 
  6:  $TEST_6 
  7:  $TEST_7
  8:  $TEST_8
  9:  $TEST_9
  10: $TEST_10
  
  firesim workloads
  -----------------
  lab3_orig_tiler: orig_tiler variant of the ee290-lab3 workloads
  lab3_fsm_tiler:  fsm_tiler variant of the ee290-lab3 workloads
  lab3_hw_tiler:   hw_tiler variant of the ee290-lab3 workloads
  
  hw simulator
  ------------
  -spike        --> run spike simulator (default)
  -vcs          --> run the vcs simulator 
  -verilator    --> run the verilator-generated simulator
  -firesim      --> run the firesim simulator
  
  sw platform/variant (vcs, verilator, spike)
  --------------------------------------------
  -pk           --> run workload using pk execution environment (default)
  -bare         --> use bare-metal workload
  
  -orig_tiler   --> use the original tiler algorithm on the old ISA (default)
  -fsm_tiler    --> use FSM-based tiler algorithm on the old ISA
  -hw_tiler     --> use the new gemmini2 ISA hardware tiler
  
  hw config, tracing, runtime verbosity (vcs, verilator)
  ------------------------------------------------------
  -hw_lab3      --> the $HW_CONFIG_LAB3 Chisel config (default)
  -hw_g2        --> the $HW_CONFIG_G2 Chisel config
  -hw_g2_dse1   --> build $HW_CONFIG_G2_DSE1
  -hw_g2_dse2   --> build $HW_CONFIG_G2_DSE2
  -hw_g2_dse3   --> build $HW_CONFIG_G2_DSE3
  -hw_g2_dse4   --> build $HW_CONFIG_G2_DSE4
  -hw_g2_dse5   --> build $HW_CONFIG_G2_DSE5
  -hw_g2_dse6   --> build $HW_CONFIG_G2_DSE6
  -hw_g2_dse7   --> build $HW_CONFIG_G2_DSE7
  -hw_g2_dse8   --> build $HW_CONFIG_G2_DSE8
  
  -trace_start <c>  --> start tracing at this cycle (defaults to 0)
  -vcd_full         --> capture all signals in design
  -vcd_mesh         --> generates a vcd of just the mesh signals
  -vpd_full         --> same as vcd_full, but generate vpd (vcs only)
  -fst_full         --> same as vcd_full, but generate fst (verilator only)
  
  -verbose          --> verbose rtl-printf logging
  -debug            --> use the debug-build of the simulator
  
  misc options
  ------------
  -noisy            --> print to stdout and the logfile
  -debugger         --> enter into the debugger mode
  -max_cycles <int> --> terminate simulation after this many cycles
  -args <...>       --> args to pass to workload's argv[]
  -h|help           --> display this help
  
  examples
  --------
  runsim_gemmini -bare -orig_tiler -spike 1
  runsim_gemmini -pk -fsm_tiler -spike -noisy 1
  runsim_gemmini -bare -orig_tiler -verilator -verbose 1
  runsim_gemmini -firesim lab3_orig_tiler

EOF
  exit 1
}

#=============================================================================
# run spike, vcs, verilator
#=============================================================================
sw_dir() {
  echo "${SW_DIR}/gemmini-rocc-tests/build_${SW_MODE}/$1"
}

runsim() {
  local workload_dir="$1"
  local workload_name="$2"

  # initialize workload, workload args
  local workload_binary="${workload_dir}/${workload_name}-${SW_PLATFORM}"
  local workload_args="$WORKLOAD_ARGS"
  local binary_name="$(basename "$workload_binary")"
  if [ "$SW_PLATFORM" == "pk" ]; then
    workload_args="$workload_binary $workload_args"
    workload_binary=pk
  fi

  # initialize logs, performance counter
  local ts="$(date "+%Y-%m-%d_%H-%M-%S")"
  local testname="${ts}__${SW_PLATFORM}__${SW_MODE}"
  local testname="${testname}__${HW_CONFIG}__${binary_name}"
  local starttime=$SECONDS

  # initialize simulator options
  local extra_opts=""
  local debugger_opts=""

  info "$testname started"
  #------------------------
  case $HW_SIM in
    spike)
      # rundir/logging setup
      cd "$SPIKE_DIR"
      local logdir="$SPIKE_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # simulator, simulator options
      BIN="spike"
      local extra_opts="--extension=${SPIKE_EXT}"
      if [ "$IS_VERBOSE" -eq 1 ] ; then extra_opts="$extra_opts -l"; fi
      if [ "$IS_DEBUGGER" -eq 1 ] ; then debugger_opts="$debugger_opts -d"; fi
      ;;
    vcs)
      # rundir/logging setup
      cd "$VCS_DIR"
      local logdir="$VCS_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      local vcdfile="${logdir}/${testname}.vcd"
      local vpdfile="${logdir}/${testname}.vpd"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # simulator, simulator options
      BIN="$VCS_DIR/simv-${HW_CONFIG_PROJECT}-${HW_CONFIG_FULL}"
      if [ "$IS_DEBUG" -eq 1 ] ; then BIN="${BIN}-debug"; fi
      if [ "$IS_VERBOSE" -eq 1 ] ; then extra_opts="$extra_opts +verbose"; fi
      extra_opts="$extra_opts +permissive"
      extra_opts="$extra_opts +max-cycles=$MAX_CYCLES"
      extra_opts="$extra_opts -fgp=multisocket,single_socket_mode"

      # trace configuration
      case $TRACE_TYPE in
        none) ;;
        vcd_full) extra_opts="$extra_opts +vcdfile=$vcdfile"
                  extra_opts="$extra_opts +dump-start=$TRACE_START" ;;
        vpd_full) extra_opts="$extra_opts +vcdplusfile=$vpdfile"
                  extra_opts="$extra_opts +dump-start=$TRACE_START" ;;
        *) err "vcs does not support $TRACE_TYPE tracing mode!"
      esac
      extra_opts="$extra_opts +permissive-off"

      if [ "$IS_DEBUGGER" -eq 1 ] ; then
        debugger_opts="$debugger_opts +permissive -gui +permissive-off"
      fi
      ;;
    verilator)
      # rundir/logging setup
      cd "$VERILATOR_DIR"
      local logdir="$VERILATOR_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      local vcdfile="${logdir}/${testname}.vcd"
      local fstfile="${logdir}/${testname}.fst"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # simulator, simulator options
      BIN="$VERILATOR_DIR/simulator-${HW_CONFIG_PROJECT}-${HW_CONFIG_FULL}"
      if [ "$IS_DEBUG" -eq 1 ] ; then BIN="${BIN}-debug"; fi
      if [ "$IS_VERBOSE" -eq 1 ] ; then extra_opts="$extra_opts +verbose"; fi
      extra_opts="$extra_opts -c "
      extra_opts="$extra_opts +max-cycles=$MAX_CYCLES"

      # trace configuration
      case $TRACE_TYPE in
        none) ;;
        vcd_full) extra_opts="$extra_opts -v $vcdfile -x $TRACE_START";;
        fst_full) extra_opts="$extra_opts -v $fstfile -x $TRACE_START";;
        *) err "verilator does not support $TRACE_TYPE tracing mode!"
      esac
      
      if [ "$IS_DEBUGGER" -eq 1 ] ; then err "verilator has no debugger!"; fi
      ;;
    *)
      err "workload $workload_name got invalid simulator: $HW_SIM"
      ;;
  esac
  #-------------------------------------------------------------------------
  if [ "$IS_DEBUGGER" -eq 1 ] ; then
    info "interactive debug started, no logfile generated!"
    stty -echo
    $NUMACTL $BIN 
      $debugger_opts $extra_opts "$workload_binary" $workload_args
    stty echo
  elif [ "$IS_NOISY" -eq 1 ] ; then
    set -x
    $NUMACTL $BIN $extra_opts "$workload_binary" $workload_args \
      |& spike-dasm |& tee -a "$logfile"
    stty echo
    set +x
  else
    $NUMACTL $BIN $extra_opts "$workload_binary" $workload_args \
      |& spike-dasm &>> "$logfile"
    stty echo
  fi
  #-------------------------------------------------------------------------
  totaltime=$(( $SECONDS-$starttime ))
  if grep FAIL "$logfile" ; then 
    ferr "$testname failed!" "$logfile"; 
  fi
  finfo "$testname succeeded in $totaltime seconds" "$logfile"
}

#=============================================================================
# run firesim
#=============================================================================
firesim_cmds(){
  local runtime_config="$1"
  firesim launchrunfarm -c "$runtime_config" -a "$HWDB_CONFIG"
  firesim infrasetup    -c "$runtime_config" -a "$HWDB_CONFIG"
  firesim runworkload   -c "$runtime_config" -a "$HWDB_CONFIG" 
}

runfiresim() {
  local workload_name="$1"
  local runtime_config="$2"

  if [ "$HW_SIM" != "firesim" ]; then
    err "$workload_name must be run with -firesim simulator!"
  fi

  # initialize logs, performance counter
  local ts="$(date "+%Y-%m-%d_%H-%M-%S")"
  local testname="${ts}__${workload_name}"
  local starttime=$SECONDS

  # rundir/logging setup
  cd "$FIRESIM_DIR"
  local logdir="$FIRESIM_DIR/logs"
  local logfile="${logdir}/${testname}.log"
  if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

  info "$testname started"
  #-------------------------------------------------------------------------
  if [ "$IS_NOISY" -eq 1 ] ; then
    set -x
    firesim_cmds "$runtime_config" |& tee -a "$logfile"
    set +x
  else
    firesim_cmds "$runtime_config" &>> "$logfile"
  fi
  stty echo
  #-------------------------------------------------------------------------
  totaltime=$(( $SECONDS-$starttime ))
  if grep FAIL "$logfile" ; then 
    ferr "$testname failed!" "$logfile"; 
  fi
  finfo "$testname succeeded in $totaltime seconds" "$logfile"
}

#=============================================================================
# run
#=============================================================================
if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    #-------------------------------------------------------------------------
    -spike)     HW_SIM="spike"     ;;
    -vcs)       HW_SIM="vcs"       ;;
    -verilator) HW_SIM="verilator" ;;
    -firesim)   HW_SIM="firesim"   ;;
    #-------------------------------------------------------------------------
    -bare)  SW_PLATFORM="baremetal" ;;
    -pk)    SW_PLATFORM="pk" ;;
    #-------------------------------------------------------------------------
    -orig_tiler) SW_MODE="orig_tiler"; SPIKE_EXT="gemmini"  ;;
    -fsm_tiler)  SW_MODE="fsm_tiler";  SPIKE_EXT="gemmini"  ;;
    -hw_tiler)   SW_MODE="hw_tiler";   SPIKE_EXT="gemmini2" ;;
    #-------------------------------------------------------------------------
    -hw_lab3)    HW_CONFIG="hw_lab3";    HW_CONFIG_FULL="$HW_CONFIG_LAB3"   ;;
    -hw_g2)      HW_CONFIG="hw_g2";      HW_CONFIG_FULL="$HW_CONFIG_G2"     ;;
    -hw_g2_dse1) HW_CONFIG="hw_g2_dse1"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE1";;
    -hw_g2_dse2) HW_CONFIG="hw_g2_dse2"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE2";;
    -hw_g2_dse3) HW_CONFIG="hw_g2_dse3"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE3";;
    -hw_g2_dse4) HW_CONFIG="hw_g2_dse4"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE4";;
    -hw_g2_dse5) HW_CONFIG="hw_g2_dse5"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE5";;
    -hw_g2_dse6) HW_CONFIG="hw_g2_dse6"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE6";;
    -hw_g2_dse7) HW_CONFIG="hw_g2_dse7"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE7";;
    -hw_g2_dse8) HW_CONFIG="hw_g2_dse8"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE8";;
    #-------------------------------------------------------------------------
    -noisy)       IS_NOISY=1    ;;
    -verbose)     IS_VERBOSE=1  ;;
    -debug)       IS_DEBUG=1    ;;
    -debugger)    IS_DEBUGGER=1 ;;
    #-------------------------------------------------------------------------
    -trace_start) 
      if [ $# -eq 0 ] ; then err "-trace_start requires arg. see usage"; fi
      TRACE_START=$1; shift;
      ;;
    -vcd_full) TRACE_TYPE="vcd_full" ;;
    -vpd_full) TRACE_TYPE="vpd_full" ;;
    -fst_full) TRACE_TYPE="fst_full" ;;
    -vcd_mesh)    
      err "vcd_mesh not supported yet"
      TRACE_TYPE="mesh" 
      ;;
    #-------------------------------------------------------------------------
    -max_cycles)
      if [ $# -eq 0 ] ; then err "-max_cycles requires arg. see usage"; fi
      MAX_CYCLES=$1; shift;
      ;;
    -args)
      if [ $# -eq 0 ] ; then err "-args requires arg. see usage"; fi
      WORKLOAD_ARGS=$1; shift;
      ;;
    -h|-help) display_usage ;;
    #-------------------------------------------------------------------------
    0)  runsim "$(sw_dir bareMetalC)"   "$TEST_0"  ;;
    1)  runsim "$(sw_dir bareMetalC)"   "$TEST_1"  ;;
    2)  runsim "$(sw_dir bareMetalC)"   "$TEST_2"  ;;
    3)  runsim "$(sw_dir bareMetalC)"   "$TEST_3"  ;;
    4)  runsim "$(sw_dir ee290)"        "$TEST_4"  ;;
    5)  runsim "$(sw_dir ee290)"        "$TEST_5"  ;;
    6)  runsim "$(sw_dir ee290)"        "$TEST_6"  ;;
    7)  runsim "$(sw_dir ee290)"        "$TEST_7"  ;;
    8)  runsim "$(sw_dir imagenet)"     "$TEST_8"  ;;
    9)  runsim "$(sw_dir imagenet)"     "$TEST_9"  ;;
    10) runsim "$(sw_dir ee290)"        "$TEST_10" ;;
    #-------------------------------------------------------------------------
    lab3_orig_tiler) runfiresim "$arg" "$FSIM_RT_LAB3_ORIG" ;;
    lab3_fsm_tiler)  runfiresim "$arg" "$FSIM_RT_LAB3_FSM" ;;
    lab3_hw_tiler)   runfiresim "$arg" "$FSIM_RT_LAB3_HW" ;;
    #-------------------------------------------------------------------------
    *) err "invalid option: $arg" ;;
  esac
done
