#!/bin/bash

set -euo pipefail

#=============================================================================
# setup notes
#=============================================================================
# before running anything, do the following in order:
#  1) build the simulator with `buildsim_gemmini`
#  2) rebuild the workloads with `buildworkload_gemmini`
#=============================================================================

# this builds variations of each simulator for your gemmini simulations
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
#source "$CY_DIR/sourceme.sh"

# set simulator dirs
VCS_DIR="$CY_DIR/sims/vcs"
VERILATOR_DIR="$CY_DIR/sims/verilator"
FIRESIM_DIR="$CY_DIR/sims/firesim"
SPIKE_DIR="$CY_DIR/sims/spike"

# workload configuration options
SW_DIR="$CY_DIR/generators/gemmini/software/gemmini-rocc-tests"
SW_DIR_BARE="${SW_DIR}/build/bareMetalC"
SW_DIR_EE290="${SW_DIR}/build/ee290"
SW_DIR_IMAGENET="${SW_DIR}/build/imagenet"
SW_DIR_MLPS="${SW_DIR}/build/mlps"

# general simulator options
HW_CONFIG_PROJECT=example
HW_CONFIG_LAB3=GemminiEE290Lab3RocketConfig

# for vcs sim only
# UCLI_MESH="$LOGDIR/ucli_mesh.tcl"

TEST_1=template
TEST_2=large_matmul
TEST_3=large_matmul_without_cpu
TEST_4=very_large_matmul
TEST_5=cifar_quant
TEST_6=mobilenet
TEST_7=resnet50

#=============================================================================
# defaults
#=============================================================================
# SW_PLATFORM: baremetal, linux
SW_PLATFORM="baremetal"

# SW_MODES: hw_tiler (gemmini2), fsm_tiler (gemmini), orig_tiler (gemmini)
SW_MODE="hw_tiler"
SPIKE_EXT="gemmini2"

# HW_CONFIG: lab3
HW_CONFIG="lab3"
HW_CONFIG_FULL="$HW_CONFIG_LAB3"

# HW_SIM: spike, vcs, verilator, firesim
HW_SIM="spike"

# HW_SIMULATOR options
IS_NOISY=0
IS_VERBOSE=0
IS_DEBUG=0
IS_DEBUGGER=0

# VCD_TYPE: none, full, mesh
VCD_TYPE="none"

#=============================================================================
# subroutines
#=============================================================================
err() { echo "[ERROR]: $@"; exit 1; }
info() { echo "[INFO]: $@"; }
ferr() { echo "[ERROR]: $1" |& tee "$2"; exit 1; }
finfo() { echo "[INFO]: $1" |& tee "$2"; }

display_usage() {
  cat <<EOF

  runsim_gemmini [options] <workload1> [options] [<workload2> ...]
  ------------------------------------------------
  Utility to run simulators with different workloads. By default, it run
  whatever workload was generated by the buildworkload_gemmini command. By
  default it will run in quiet mode on the spike simulator. All logs will
  go in the respective chipyard/sims/<simultor>/logs directory.

  Available workloads:
    1: $TEST_1 
    2: $TEST_2 
    3: $TEST_3 
    4: $TEST_4 
    5: $TEST_5 
    6: $TEST_6 
    7: $TEST_7

  Available simulators (you must buildsim_gemmini these first):
    lab3: $HW_CONFIG_LAB3 (default)
    
  sw platform
  -----------
  -bare         --> use bare-metal workload (default)
  -linux        --> use linux workload
 
  sw config mode
  --------------
  -hw_tiler     --> use the new gemmini2 ISA hardware tiler (default)
  -fsm_tiler    --> use FSM-based tiler algorithm on the old ISA
  -orig_tiler   --> use the original tiler algorithm on the old ISA

  hw config mode
  --------------
  -lab3         --> use the simulator with the 'lab3' config (default)

  hw simulator
  ------------
  -spike        --> run spike simulator (default)
  -vcs          --> run the vcs simulator 
  -verilator    --> run the verilator-generated simulator
  -firesim      --> run the firesim-generated simulator

  trace options
  -------------
  -vcd_none     --> no vcd generated (default)
  -vcd_full     --> capture all signals in design
  -vcd_mesh     --> generates a vcd of just the mesh signals
	-fst_full			--> same as vcd_full, but generate fst instead

  hw sim options
  --------------
  -no_noisy     --> only print simulator output to logfile (default)
  -noisy        --> print to stdout and the logfile
  -no_verbose   --> only print the selective RTL printf()s (default)
  -verbose      --> verbose rtl-printf logging
  -no_debug     --> don't use the debug-build of the simulator (default)
  -debug        --> use the debug-build of the simulator
  -no_debugger  --> don't open the interactive debugger (default)
  -debugger     --> enter into the debugger mode

  misc options
  ------------
  -h|help       --> display this help

EOF
  exit 1
}

#create_uclis() {
#  local testname="${1}"
#  cat >>"$UCLI_MESH" <<EOF
#dump -file "$LOGDIR/${1}-ucli_sch.vpd"
#run
#EOF
#}

runsim() {
  local workload_dir="$1"
  local workload_name="$2"
  local workload_binary="${workload_dir}/${workload_name}-${SW_PLATFORM}"
  local workload_args=""
  local binary_name="$(basename "$workload_binary")"
  local ts="$(date "+%Y-%m-%d_%H:%M:%S")"
  local testname="${ts}__${SW_MODE}__${binary_name}"
  local starttime=$SECONDS
  local extra_opts=""
  local debugger_opts=""

  info "$testname started"
  #------------------------
  case $HW_SIM in
    spike)
      BIN="spike"
      local extra_opts="--extension=${SPIKE_EXT}"
      local logdir="$SPIKE_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$SPIKE_DIR"

      if [ "$IS_VERBOSE" -eq 1 ] ; then
        extra_opts="$extra_opts -l"
      fi
      if [ "$IS_DEBUGGER" -eq 1 ] ; then
        debugger_opts="$debugger_opts -d"
      fi
      ;;
    vcs)
      BIN="$VCS_DIR/simv-${HW_CONFIG_PROJECT}-${HW_CONFIG_FULL}"
      if [ "$IS_DEBUG" -eq 1 ] ; then 
        BIN="${BIN}-debug"; 
      fi

      local logdir="$VCS_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$VCS_DIR"

      #UCLI="-ucli -i $UCLI_MESH"
      #if [ -n "$UCLI" ] ; then 
      #  create_uclis "$testname"
      #fi
      if [ "$IS_VERBOSE" -eq 1 ] ; then
        extra_opts="$extra_opts +permissive +verbose +permissive-off"
      fi
      if [ "$IS_DEBUGGER" -eq 1 ] ; then
        debugger_opts="$debugger_opts +permissive -gui +permissive-off"
      fi
      ;;
    verilator)
      BIN="$VERILATOR_DIR/simulator-${HW_CONFIG_PROJECT}-${HW_CONFIG_FULL}"
      if [ "$IS_DEBUG" -eq 1 ] ; then BIN="${BIN}-debug"; fi
      extra_opts="$extra_opts -c "

      local logdir="$VERILATOR_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      local vcdfile="${logdir}/${testname}.vcd"
      local fstfile="${logdir}/${testname}.fst"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$VERILATOR_DIR"

      case $VCD_TYPE in
        none) ;;
        full) extra_opts="$extra_opts -v $vcdfile";;
        vcd_full) extra_opts="$extra_opts -v $vcdfile";;
        fst_full) extra_opts="$extra_opts -v $fstfile";;
        *) err "verilator does not support $VCD_TYPE tracing mode!"
      esac

      if [ "$IS_VERBOSE" -eq 1 ] ; then
        extra_opts="$extra_opts +verbose"
      fi
      if [ "$IS_DEBUGGER" -eq 1 ] ; then
        err "verilator has no integrated debugger!"
      fi
      ;;
    firesim)
      err "firesim not supported yet"
      ;;
    *)
      err "invalid HW_SIM: $HW_SIM"
      ;;
  esac
  #------------------------
  if [ "$IS_DEBUGGER" -eq 1 ] ; then
    finfo "interactive debug -- no output to logfile" "$logfile"
    $NUMACTL $BIN $debugger_opts $extra_opts "$workload_binary" $workload_args
    stty echo
  elif [ "$IS_NOISY" -eq 1 ] ; then
    set -x
    $NUMACTL $BIN $extra_opts "$workload_binary" $workload_args |& tee "$logfile"
    stty echo
    set +x
  else
    $NUMACTL $BIN $extra_opts "$workload_binary" $workload_args &> "$logfile"
    stty echo
  fi
  #------------------------
  totaltime=$(( $SECONDS-$starttime ))
  if grep FAIL "$logfile" ; then 
    ferr "$testname failed!" "$logfile"; 
  fi
  finfo "$testname succeeded in $totaltime seconds" "$logfile"
}

sw_dir() {
  echo "${SW_DIR}/build_${SW_MODE}/$1"
}

#=============================================================================
# run
#=============================================================================
if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    #-------------------------------------------------------------------------
    -bare)  SW_PLATFORM="baremetal" ;;
    -linux) SW_PLATFORM="linux"     ;;
    #-------------------------------------------------------------------------
    -hw_tiler)   SW_MODE="hw_tiler";   SPIKE_EXT="gemmini2" ;;
    -fsm_tiler)  SW_MODE="fsm_tiler";  SPIKE_EXT="gemmini"  ;;
    -orig_tiler) SW_MODE="orig_tiler"; SPIKE_EXT="gemmini"  ;;
    #-------------------------------------------------------------------------
    -lab3)
      HW_CONFIG="lab3"
      HW_CONFIG_FULL="$HW_CONFIG_LAB3"
      ;;
    #-------------------------------------------------------------------------
    -spike)     HW_SIM="spike"     ;;
    -vcs)       HW_SIM="vcs"       ;;
    -verilator) HW_SIM="verilator" ;;
    -firesim)   HW_SIM="firesim"   ;;
    #-------------------------------------------------------------------------
    -noisy)       IS_NOISY=1 ;;
    -no_noisy)    IS_NOISY=0 ;;
    -verbose)     IS_VERBOSE=1 ;;
    -no_verbose)  IS_VERBOSE=0 ;;
    -debug)       IS_DEBUG=1 ;;
    -no_debug)    IS_DEBUG=0 ;;
    -debugger)    IS_DEBUGGER=1 ;;
    -no_debugger) IS_DEBUGGER=0 ;;
    #------------------------------------------------------------------------
    -vcd_full) VCD_TYPE="full" ;;
    -fst_full) VCD_TYPE="fst_full" ;;
    -vcd_none)    
      err "vcd-generation not supported yet"
      VCD_TYPE="none" 
      ;;
    -vcd_mesh)    
      err "vcd-generation not supported yet"
      VCD_TYPE="mesh" 
      ;;
    #------------------------------------------------------------------------
    -h|-help) display_usage ;;
    #------------------------------------------------------------------------
    1) runsim "$(sw_dir bareMetalC)"   "$TEST_1" ;;
    2) runsim "$(sw_dir ee290)"        "$TEST_2" ;;
    3) runsim "$(sw_dir ee290)"        "$TEST_3" ;;
    4) runsim "$(sw_dir ee290)"        "$TEST_4" ;;
    5) runsim "$(sw_dir ee290)"        "$TEST_5" ;;
    6) runsim "$(sw_dir imagenet)"     "$TEST_6" ;;
    7) runsim "$(sw_dir imagenet)"     "$TEST_7" ;;
    #------------------------------------------------------------------------
    *) err "invalid option: $arg" ;;
  esac
done
