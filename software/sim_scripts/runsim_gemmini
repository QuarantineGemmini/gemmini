#!/bin/bash

set -euo pipefail

#=============================================================================
# setup notes
#=============================================================================
# before running anything, do the following in order:
#  1) build the simulator with the `buildsim_gemmini` command
#  2) build the workloads in the gemmini/software/gemmini-rocc-tests dir
#      by running `rm -fr build && ./build.sh`

# 1) which test to run (or multiple)
# 2) use debug compile or fast compile
# 3) use mesh-ucli, or some other ucli

# this builds variations of each simulator for your gemmini simulations
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
source "$CY_DIR/sourceme.sh"

# set simulator dirs
VCS_DIR="$CY_DIR/sims/vcs"
VERILATOR_DIR="$CY_DIR/sims/verilator"
FIRESIM_DIR="$CY_DIR/sims/firesim"
SPIKE_DIR="$CY_DIR/sims/spike"

# workload configuration options
SW_DIR="$CY_DIR/generators/gemmini/software/gemmini-rocc-tests"
SW_DIR_BARE="${SW_DIR}/build/bareMetalC"
SW_DIR_EE290="${SW_DIR}/build/ee290"
SW_DIR_IMAGENET="${SW_DIR}/build/imagenet"
SW_DIR_MLPS="${SW_DIR}/build/mlps"

# general simulator options
CONFIG_LAB3=GemminiEE290Lab3RocketConfig
BIN_LAB3="$DIR/simv-example-${CONFIG_LAB3}"

# for vcs sim only
# UCLI_MESH="$LOGDIR/ucli_mesh.tcl"

TEST_1=large_matmul
TEST_2=large_matmul_without_cpu
TEST_3=very_large_matmul
TEST_4=cifar_quant
TEST_5=mobilenet
TEST_6=resnet50

#=============================================================================
# defaults
#=============================================================================
BIN="$BIN_LAB3"

IS_NOISY=0
IS_VERBOSE=0
IS_DEBUGGER=0
VCD_TYPE="none"
SIM_TYPE="spike"
WORKLOAD_TYPE="baremetal"

#=============================================================================
# subroutines
#=============================================================================
err() { echo "[ERROR]: $@"; exit 1; }
info() { echo "[INFO]: $@"; }

display_usage() {
  cat <<EOF

  runsim_gemmini [options] <num1> [options] [<num2> ...]
  ------------------------------------------------
  Utility to run simulators with different workloads. By default, it run
  whatever workload was generated by the buildworkload_gemmini command. By
  default it will run in quiet mode on the spike simulator. All logs will
  go in the respective chipyard/sims/<simultor>/logs directory.
  Available workloads:
    1: $TEST_1 
    2: $TEST_2 
    3: $TEST_3 
    4: $TEST_4 
    5: $TEST_5 
    6: $TEST_6 
  Available simulators (you must buildsim_gemmini these first):
    lab3: $CONFIG_LAB3 (default)
    
  options
  -------
  -bare         --> use bare-metal workload (default)
  -linux        --> use linux workload

  -lab3         --> use the simulator with the 'lab3' config (default)

  -spike        --> run spike simulator (default)
  -vcs          --> run the vcs simulator 
  -verilator    --> run the verilator-generated simulator
  -firesim      --> run the firesim-generated simulator

  -noisy        --> print to stdout as well as the logfile
  -no_noisy     --> opposite of above (default)
  -verbose      --> verbose rtl-printf logging (if simulator supports it)
  -no_verbose   --> opposite of above (default)
  -debugger     --> enter into the debugger mode (if supported)
  -no_debugger  --> opposite of above (default)
  -vcd_none     --> no vcd generated (default)
  -vcd_mesh     --> generates a vcd of just the mesh signals
  -h|help       --> display this help

EOF
  exit 1
}

#create_uclis() {
#  local testname="${1}"
#  cat >>"$UCLI_MESH" <<EOF
#dump -file "$LOGDIR/${1}-ucli_sch.vpd"
#run
#EOF
#}

runsim() {
  local workload_dir="$1"
  local workload_name="$2"
  local workload_binary="${workload_dir}/${workload_name}-${WORKLOAD_TYPE}"
  local binary_name="$(basename "$workload_binary")"
  local ts="$(date "+%Y-%M-%d_%H:%M:%S")"
  local testname="${ts}_${binary_name}"
  local starttime=$SECONDS

  info "$testname started"
  #------------------------
  case $SIM_TYPE in
    spike)
      BIN="spike"
      local extra_opts="--extension=gemmini"
      local logdir="$SPIKE_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$SPIKE_DIR"

      if [ "$IS_VERBOSE" -eq 1 ] ; then
        extra_opts="$extra_opts -l"
      fi
      if [ "$IS_DEBUGGER" -eq 1 ] ; then
        extra_opts="$extra_opts -d"
      fi
      ;;
    vcs)
      local extra_opts=""
      local logdir="$VCS_DIR/logs"
      local logfile="${logdir}/${testname}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$VCS_DIR"

      #UCLI="-ucli -i $UCLI_MESH"
      #if [ -n "$UCLI" ] ; then 
      #  create_uclis "$testname"
      #fi
      if [ "$IS_VERBOSE" -eq 1 ] ; then
        extra_opts="$extra_opts +permissive +verbose +permissive-off"
      fi
      if [ "$IS_DEBUGGER" -eq 1 ] ; then
        extra_opts="$extra_opts -gui"
      fi
      ;;
    verilator)
      err "verilator not supported yet"
      ;;
    firesim)
      err "firesim not supported yet"
      ;;
    *)
      err "invalid SIM_TYPE: $SIM_TYPE"
      ;;
  esac
  #------------------------
  if [ "$IS_NOISY" -eq 1 ] ; then
    set -x
    $BIN $extra_opts "$workload_binary" |& tee "$logfile"
    stty echo
    set +x
  else
    $BIN $extra_opts "$workload_binary" &> "$logfile"
    stty echo
  fi
  #------------------------
  totaltime=$(( $SECONDS-$starttime ))
  if grep FAIL "$logfile" ; then 
    err "$testname failed!"; 
  fi
  info "$testname succeeded in $totaltime seconds"
}

#=============================================================================
# run
#=============================================================================
if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    -lab3)
      CONFIG="lab3"
      CONFIG_FULL="$CONFIG_LAB3"
      BIN="$BIN_LAB3"
      ;;
    -spike) 
      SIM_TYPE="spike"
      ;;
    -vcs) 
      SIM_TYPE="vcs"
      ;;
    -verilator) 
      SIM_TYPE="verilator"
      ;;
    -firesim) 
      SIM_TYPE="firesim"
      ;;
    -noisy)       IS_NOISY=1 ;;
    -no_noisy)    IS_NOISY=0 ;;
    -verbose)     IS_VERBOSE=1 ;;
    -no_verbose)  IS_VERBOSE=0 ;;
    -debugger)    IS_DEBUGGER=1 ;;
    -no_debugger) IS_DEBUGGER=0 ;;
    -bare)        WORKLOAD_TYPE="baremetal" ;;
    -linux)       WORKLOAD_TYPE="linux" ;;
    -vcd_none)    
      err "vcd-generation not supported yet"
			VCD_TYPE="none" 
			;;
    -vcd_mesh)    
      err "vcd-generation not supported yet"
      VCD_TYPE="mesh" 
      ;;
    -h|-help) display_usage ;;
    1) runsim "$SW_DIR_EE290"    "$TEST_1" ;;
    2) runsim "$SW_DIR_EE290"    "$TEST_2" ;;
    3) runsim "$SW_DIR_EE290"    "$TEST_3" ;;
    4) runsim "$SW_DIR_EE290"    "$TEST_4" ;;
    5) runsim "$SW_DIR_IMAGENET" "$TEST_5" ;;
    6) runsim "$SW_DIR_IMAGENET" "$TEST_6" ;;
    *) err "invalid option: $arg" ;;
  esac
done
