#!/bin/bash

set -euo pipefail

#=============================================================================
# initialize variables
#=============================================================================
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
source "$DIR/.common.sh"

SW_DIR="$CY_DIR/generators/gemmini/software"
LOGDIR="$SW_DIR/logs"

ORIG_CFLAGS="${CFLAGS:-}"

# make sure the software workloads don't have broken makefiles
export MAKEFLAGS="${MAKEFLAGS:-} --warn-undefined-variables"

IS_NOISY=0
IS_FORCE=0
IS_DEBUG=0

CFLAGS_ORIG_TILER=""
CFLAGS_FSM_TILER="-DUSE_FSM_TILER"
CFLAGS_HW_TILER="-DUSE_HW_TILER"

DEBUG_CFLAGS=""
NODEBUG_CFLAGS="-DNODEBUG"

#=============================================================================
# subroutines
#=============================================================================
display_usage() {
  cat <<EOF

  buildworkload_gemmini [options] <cfg1> [options] [<cfg2> ...]
  --------------------------------------------------------
  Utility to build parameterized workloads for gemmini simulation. It builds
  baremetal, pk, and linux workloads for the targets. The default target is
  orig_tiler (old gemmini ISA, and old software tiler).
  Targets are:
    hw_tiler:   use the new gemmini2 ISA hardware tiler (default)
    fsm_tiler:  use FSM-based tiler algorithm on the old ISA
    orig_tiler: use the original tiler algorithm on the old ISA

  other options
  -------------
  -no_noisy   --> only print build output to logfile (default)
  -noisy      --> print build output to stdout and the logfile
  -no_force   --> don't force-rebuild the build/ directory (default)
  -force      --> force rebuild by deleting build/ dir first
  -no_debug   --> disable verbose software debugging (default)
  -debug      --> enable verbose software debugging
  -h|help     --> display this help

EOF
  exit 1
}

#=============================================================================
# subroutines
#=============================================================================
buildworkload() {
  local target_name="$1"
  local target_cflags="$2"

  # init local variables
  local ts="$(date "+%Y-%m-%d_%H-%M-%S")"
  local dst_dir="build_${target_name}"
  local run_name="${ts}__${target_name}"
  local logfile="$LOGDIR/${run_name}.log"
  local starttime=$SECONDS

  # set the cflags
  export CFLAGS="$ORIG_CFLAGS $target_cflags"
  if [ "$IS_DEBUG" -eq 1 ] ; then export CFLAGS="$CFLAGS $DEBUG_CFLAGS"; 
	else export CFLAGS="$CFLAGS $NODEBUG_CFLAGS"; fi

  finfo "$run_name started" "$logfile"
  #-------------------------------------------------------------------------
  cd "$SW_DIR/gemmini-rocc-tests"
  if [ "$IS_FORCE" -eq 1 ]; then
    finfo "force removing $PWD/build/" "$logfile"
    rm -fr build/ |& tee -a "$logfile"
  fi
  #-------------------------------------------------------------------------
  if [ "$IS_NOISY" -eq 1 ] ; then
    set -x
    { ./build.sh
      stty echo
      rm -fr "$dst_dir"
      cp -r "build" "$dst_dir"
      cp "include/gemmini_params.h" "$dst_dir/"
    } |& tee -a "$logfile"
    set +x
  else
    { ./build.sh
      stty echo
      rm -fr "$dst_dir"
      cp -r "build" "$dst_dir"
      cp "include/gemmini_params.h" "$dst_dir/"
    } &>> "$logfile"
  fi
  #-------------------------------------------------------------------------
  totaltime=$(( $SECONDS-$starttime ))
  finfo "$run_name finished in $totaltime seconds" "$logfile"
}

#=============================================================================
# configuration
#=============================================================================
if [ ! -d "$LOGDIR" ]; then mkdir -p "$LOGDIR" ; fi

if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    #-------------------------------------------------------------------------
    -noisy)    IS_NOISY=1 ;;
    -no_noisy) IS_NOISY=0 ;;
    -force)    IS_FORCE=1 ;;
    -no_force) IS_FORCE=0 ;;
    -debug)     IS_DEBUG=1 ;;
    -no_debug) IS_DEBUG=0 ;;
    #------------------------------------------------------------------------
    -h|-help) display_usage ;;
    #------------------------------------------------------------------------
    orig_tiler) buildworkload $arg "$CFLAGS_ORIG_TILER" ;;
    fsm_tiler)  buildworkload $arg "$CFLAGS_FSM_TILER" ;;
    hw_tiler)   buildworkload $arg "$CFLAGS_HW_TILER" ;;
    #------------------------------------------------------------------------
    *) err "invalid option: $arg" ;;
  esac
done
