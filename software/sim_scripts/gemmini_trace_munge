#!/usr/bin/env python

# [ssteffl] NOTE: this is not functional at the moment

# SIMPLE 1st pass: ASSUME WEIGHT-STATIONARY!!!

import re
import sys
import os
from textwrap import dedent as dd
import argparse

#=============================================================================
# constants/defaults
#=============================================================================
NUM_ENTRIES=16
DIM=32
ELEM_SIZE_B=1
ACC_SIZE_B=4

#=============================================================================
# subroutines
#=============================================================================
def print_usage():
  print(f"""
  gemmini_trace_munge <in_log> [options]
  --------------------------------------
  Reads a log file from a gemmini RTL simulator (vcs, verilator, firesim),
  and does a variety of actions on it. First, if parses the log file into
  command objects in each of the entry slots. Then, it verifies accept, issuing
  and finalizing of each command with respect to queue ordering and 
  RAW, WAR, and WAW dependencies. Finally, you can output a waveform of the
  commands in various forms (wavedrom json, vcd, excel, ascii).

  options
  -------
  -dim <count>            --> systolic-array dimension (defualt is {DIM})
  -elem_size <bytes>      --> size of input elements (default is {ELEM_SIZE_B})
  -acc_size <bytes>       --> size of output elements (default is {ACC_SIZE_B})
  -entries <count>        --> number of ROB entries, (default is {NUM_ENTRIES})
  -wavedrom_out <json>    --> generate a json for wavedrom consumption
  -h|-help                --> print this help
  """))
  exit(1)

#=============================================================================
# parse args
#=============================================================================
class GemminiCommandParams(NamedTuple):
  accept_cycle
  issue_cycle
  final_cycle
  entry_id
  cmd_id

class Queue(Enum)
  Exec = 0
  Load = 1
  Store = 2

class Addr(abc):
  def __init__

class DramAddr

# 
GARBAGE_ADDR = 0xffffffff

class ParamType(Enum)
  SpadReadStartAddr   = 0
  SpadWriteStartAddr  = 1
  DramReadStartAddr   = 10
  DramWriteStartAddr  = 11
  DramReadStride      = 20
  DramWriteStride     = 21

  MatmulRshift    = 100
  AccumRshift     = 101
  Relu6Lshift     = 102

class ParamArgs(NamedTuple):
  name: str
  value: int

#==============================================================================
# WEIGHT-STATIONARY RULES FOR ANY SCHEDULING ALGORITHM
#==============================================================================
# event consistency rules
# - no accept allowed in an entry slot that is occupied
# - no issue allowed in a slot that is not accepted
# - no issue allowed in a slot that is already issued
# - an issue must happen >=1 cycles afer an accept
# - no finalize allowed in a slot that is not issued
# - an issue on a slot must be consistent with the accept params
# - a finalize on a slot must be consistent with the issue params
# - a finalize must happen >=0 cycles after an issue


class Param(abc):
  def __init__(self, name, value, is_data, is_spad, is_read)
  pass

class DataParam
  def __init__(self, name, value, is_spad, is_read, stride, item_size_b)
    self.name        = name
    self.value       = value
    self.is_spad     = is_spad
    self.is_read     = is_read
    self.item_size_b = item_size_b
    self.stride      = None
    self.tiles       = None
    # spad/dram addrs
    self.spad_start  = self.value  & 0xCFFFFFFF
    self.spad_end    = self_spad_start + DIM
    self.dram_start  = self.value
    self.dram_end    = self_dram_start + (DIM * self.item_size_b)

    if self.is_spad & self.is_read:
      # TODO: fixme
      # do not read from accumulator in scratchpad
      assert(self.value & 0x4000000 == 0)

  def depends_on_data_from(self, other):
    """
    'other' belongs to a previous or current command. returns true if
    this param's data param depends on another command's data param. only
    concerned with RAW, WAW, and WAR dependencies
    """
    assert(isinstance(other, DataParam))

    both_spad        = self.is_spad and other.is_spad
    both_dram        = (not self.is_spad) and (not other.is_spad)
    both_not_read    = other.is_write or self.is_write
    # possible spad addrs
    other_spad_start = other.value & 0xCFFFFFFF
    other_spad_end   = other_spad_start + DIM
    # possible dram addrs
    other_dram_start = other.value
    other_dram_end   = other_dram_start + (DIM * other.item_size_b)

    if both_spad and both_not_read:
      return (self_spad_start < other_spad_end) and \
             (self_spad_end > other_spad_start)
    elif both_dram and both_not_read:
      return (self_dram_start < other_dram_end) and \
             (self_dram_end > other_dram_start)
    else:
      return False

class NoNewAcceptInOccupiedEntrySlotRule(GemminiRule):
  def __init__(self, cycle, ...):
    pass

GARBAGE_ADDR = 0xffffffff

def check_trace(trace, vs) -> None:
  """
  trace violation checks
  ---------------------------------------
  - a trace must have >0 subsequences
  - a subsequence must have >1 commands
  - a subsequence must not overlap with any other subsequence
  - all commands must be in a subsequence
  """
  vs.catetory("trace")
  (subseqs, cmds) = trace.get_subsequences()
  
  for cmd in cmds:
    vs.check()
    vs.append(TraceViolation(trace, f"cmd not in subseq: {cmd}"))

  vs.check()
  if len(subseqs) == 0:
    vs.append(TraceViolation(trace, f"no subseqs found!"))

  for idx1 in range(len(subseqs)):
    s1 = subseqs[idx1]

    vs.check()
    if len(s1.cmds()) == 1:
      vs.append(SubseqViolation(s1, f"has 1 command"))

    for idx2 in range(idx1+1, len(subseqs)):
      s2 = subseqs[idx2]
      vs.check()
      if s1.last_cycle >= s2.first_cycle:
        vs.append(SubseqViolation(s1, f"overlaps with subseq {s2}"))

  # now do all subseq children checks
  for subseq in subseqs:
    check_ordering_rules(subseq, vs)
    check_data_addressing_rules(subseq, vs)
    check_data_dependency_rules(subseq, vs)


def check_ordering_rules(subseq, vs) -> None
  """
  cmd ordering rules
  ------------------
  - the first cmd in a subseq must be a config_ex
  - an ex.pre must not the first ex cmd in the sub-sequence
  - configs must be followed by 1+ actions before another config. config
    is config_(ex/mvin/mvout) and the corresponding action is ex/mvin/mvout
  - first ex/mvin/mvout must come after first config_(ex/mvin/mvout)
  - cmds in same queue must have consistent accept, issue, and final ordering
  """
  vs.category(f"{subseq} command ordering")

  #--------------------------------------------------------------------------
  # config_ex rules
  first_cmd = subseq.cmd(0)
  vs.check()
  if first_cmd.type != CONFIG_EX:
    vs.append(CmdViolation(first_cmd, f"first cmd must be config_ex"))

  #--------------------------------------------------------------------------
  # an ex.pre must be the first ex cmd in the sub-sequence
  ex_cmds = subseq.cmds(EX)
  vs.check()
  if (len(ex_cmds) == 0) or (ex_cmds[0].is_acc):
    vs.append(SubseqViolation(subseq, f"ex.pre must be the first ex cmd"))

  def check_config_and_action(type, action_type, config_type)
    #--------------------------------------------------------------------------
    # configs must be followed by 1+ actions before another config
    for cmd in subseq.cmds(config_type)
      config_after = subseq.first_accept_after(cmd.accept_cycle, config_type)
      action_after = subseq.first_accept_after(cmd.accept_cycle, action_type)
      vs.check()
      if action_after is None:
        vs.append(CmdViolation(cmd, f"no following {type} action found!"))
      else:
        vs.check()
        if (config_after is not None) and \
            (config_after.accept_cycle < action_after.accept_cycle):
          vs.append(CmdViolation(cmd, 
            f"followed by another config {config_after}"))

    #------------------------------------------------------------------------
    # first ex/mvin/mvout must come after first config_(ex/mvin/mvout)
    first_action = subseq.first_cmd(action_type)
    first_config = subseq.first_cmd(config_type)
    vs.check()
    if first_config is None:
      vs.append(SubseqViolation(subseq, f"no {type} config commands found!"))
    vs.check()
    if first_action is None:
      vs.append(SubseqViolation(subseq, f"no {type} commands found!"))
    vs.check()
    if first_action.accept_cycle < first_config.accept_cycle:
      vs.append(CmdViolation(first_action, f"occurs before {first_config}"))

    #------------------------------------------------------------------------
    # cmds in same queue must have consistent accept, issue, and final ordering
    all_cmds  = subseq.cmds(config_type) + subseq.cmds(action_type)
    by_accept = sorted(all_cmds, key=lambda cmd: cmd.accept_cycle)
    by_issue  = sorted(all_cmds, key=lambda cmd: cmd.issue_cycle)
    by_final  = sorted(all_cmds, key=lambda cmd: cmd.final_cycle)
    for idx in range(len(all_cmds)):
      (a,i,f) = (by_accept[idx], by_issue[idx], by_final=[idx])
      vs.check()
      if a != i:
        vs.append(CmdViolation(a, f"accepted before, but issued after {i}"))
      vs.check()
      if a != f:
        vs.append(CmdViolation(a, f"accepted before, but finalized after {i}"))

  # do the checks for each of the three types of commands
  check_config_and_action("mvin",  MVIN,  CONFIG_MVIN)
  check_config_and_action("mvout", MVOUT, CONFIG_MVOUT)
  check_config_and_action("ex",    EX,    CONFIG_EX)

def check_ordering_rules(subseq, vs) -> None
  """
  data dependency rules
  ---------------------
  - all ex     must issue after most recent mvin(A) finalized to same A addr
  - all ex.pre must issue after most recent mvin(B) finalized to same B addr
  - all ex     must issue after most recent mvin(D) finalized to same C addr
              (ignoring C[30] and D[30] bits during comparison)
  - all mvout  must issue after most recent ex(C) finalized to same spad addr
              (ignoring C[30] and D[30] bits during comparison)
  """
  vs.category(f"{subseq} data dependencies")

  TODO FIXME


def check_ordering_rules(subseq, vs) -> None
  """
  addressing rules
    ex cmds
      - all ex     cmds must have A != 0xffffffff
      - all ex.pre cmds must have B != 0xffffffff
      - all ex.acc cmds must have B == 0xffffffff
      - all ex     cmds must have D == 0xffffffff
      - all ex     cmds must have C != 0xffffffff
      - all scratchpad addr must be in increments of DIM
    mvin_config cmds
      - all mvin to non-accumulator must have alignment and stride 
        multiple of DIM*ELEM_SIZE (>0)
      - all mvin to accumulator must have alignment and stride 
        multiple of DIM*ACC_SIZE (>=0)
    mvin cmds
      - all scratchpad addr must be in increments of DIM
    mvout_config cmds
  - NO DRAM writes in a subsequence shall have address ranges that overlap
  """
  vs.category(f"{subseq} data addressing")

  TODO FIXME

  def aligned_to_DIM(value):
    return (value % DIM) == 0

  #---------------------------------------------------------------------------
  for cmd in trace.ex_commands():
    if cmd.A.is_garbage:
      vs.append(GemminiViolation(cmd, f"A must not equal {GARBAGE_ADDR}"))
    elif (cmd.A.value % DIM) != 0:
      vs.append(GemminiViolation(cmd, f"A must be aligned to DIM: {DIM}"))

    if cmd.is_preloaded:
      if cmd.B.is_garbage:
        vs.append(GemminiViolation(cmd, f"B must not equal {GARBAGE_ADDR}"))
      elif (cmd.B.value % DIM) != 0:
        vs.append(GemminiViolation(cmd, f"B must be aligned to DIM: {DIM}"))
    else:
      if not cmd.B.is_garbage:
        vs.append(GemminiViolation(cmd, f"B must equal {GARBAGE_ADDR}"))

    if not cmd.D.is_garbage:
      vs.append(GemminiViolation(cmd, f"D must equal {GARBAGE_ADDR}"))

    if cmd.C.is_garbage:
      vs.append(GemminiViolation(cmd, f"C must not equal {GARBAGE_ADDR}"))
    elif (cmd.C.value % DIM) != 0:
      vs.append(GemminiViolation(cmd, f"C must be aligned to DIM: {DIM}"))

  #---------------------------------------------------------------------------
  for cmd in trace.config_mvin_commands():
    if cmd.dst_is_accumulator:
      if (cmd.stride.value % (DIM*ACC_BYTES)) != 0:
        vs.append(GemminiViolation(cmd, 
          f"stride not aligned to DIM*ACC_BYTES: {DIM*ACC_BYTES}"))
    else:
      if (cmd.stride.value == 0):
        vs.append(GemminiViolation(cmd, 
          f"when dst is not accumulator, stride must be >0"))
      elif (cmd.stride.value % (DIM*ELEM_BYTES)) != 0:
        vs.append(GemminiViolation(cmd, 
          f"stride not aligned to DIM*ELEM_BYTES: {DIM*ELEM_BYTES}"))

  for cmd in trace.config_mvout_commands():
    if (cmd.stride.value == 0):
      vs.append(GemminiViolation(cmd, 
        f"stride must not be 0, stride must be >0"))
    elif (cmd.dst.stride % (DIM*ELEM_BYTES)) != 0:
      vs.append(GemminiViolation(cmd, 
        f"stride not aligned to DIM*ELEM_BYTES: {DIM*ELEM_BYTES}"))


  for cmd in trace.mvin_commands():
    if cmd.dst_is_accumulator:
      if (cmd.dst.value % (DIM*ELEM_BYTES)) != 0:
        vs.append(GemminiViolation(cmd, 
          f"dst not aligned to DIM*ELEM_BYTES {DIM*ELEM_BYTES}"))
    if (cmd.dst.value == 0):
      vs.append(GemminiViolation(cmd, f"dst must be > 0"))
    elif (cmd.dst.value % (DIM*ELEM_BYTES)) != 0:
      vs.append(GemminiViolation(cmd, 
        f"dst not aligned to DIM*ELEM_BYTES {DIM*ELEM_BYTES}"))




class GemminiTrace():
  def __init__(self, log_file, entries):
    self._log_file = log_file
    self._entries = entries
    self._read_log_file()

  def _read_log_file(self)
    pending_accepts = [None for x in range(self._entries)]
    pending_issues  = [None for x in range(self._entries)]
    commands        = []

    with open(self._log_file, "r") as f:
      for line in f:
        m = re.match("^cycle\[\s*(\d+)\],\s+entry\[\s*(\d+)\],\s+(\S.*)$", line)
        if m is None:
          next
        cycle    = m[1]
        entry_id = m[2]
        rest     = m[3]

        m = re.match("^(accept|issue|final)\[\s*(\d+)\], (\S.*)$", rest)
        if m is None:
          next
        event  = m[1]
        cmd_id = m[2]
        rest   = m[3]
        
        if event == "accept":
          if (pending_accepts[entry_id] is not None) or
              (pending_issues[entry_id] is not None):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} accepted into occupied entry_id"))
          else:
            pending_accepts[entry_id] = {
                "cycle": cycle,
                "cmd_id": cmd
              }
          pass

        elif event == "issue":
          cmd_type = rest
          if (pending_accepts[entry_id] is None):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} issued but not accepted"))
          elif (pending_issues[entry_id] is not None):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} issued into occupied slot"))
          elif (pending_accepts[entry_id]["cmd_id"] != cmd_id):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} does not match pending-accept cmd_id"))
          elif (pending_accepts[entry_id]["cmd_type"] != cmd_type):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} does not match pending-accept cmd_type"))
          elif (pending_accepts[entry_id]["cycle"] >= cycle):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} occurs on or before its accepted cycle"))
          pending_issues[entry_id] = {
              "cycle": cycle,
              "cmd_id": cmd_id,
              "cmd_type": cmd_type
            }
        else:
          # event == "final"
          cmd_type = rest
          if (pending_issues[entry_id] is None):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} finalized but not issued"))
          elif (pending_issues[entry_id]["cmd_id"] != cmd_id):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} does not match pending-issue cmd_id"))
          elif (pending_issues[entry_id]["cmd_type"] != cmd_type):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} does not match pending-issue cmd_type"))
          elif (pending_issues[entry_id]["cycle"] > cycle):
            errors.append(GemminiTraceError(
              cycle=cycle,
              entry_id=entry_id,
              msg=f"{cmd_id} occurs on or before its issued cycle"))

          ae = pending_accepts[entry_id]
          ie = pending_issues[entry_id]
          commands.append(GemminiCommand(
            accept_cycle=ae["cycle"],
            issue_cycle=ie["cycle"],
            final_cycle=cycle,
            entry_id=entry_id,
            cmd_id=cmd_id,
            params=ae["params"]))

class GemminiCommand(abc):
  @property
  def __init__(self, accept_cycle, issue_cycle, final_cycle, 
      entry_id, cmd_id, params):
    self.accept_cycle = accept_cycle
    self.issue_cycle = issue_cycle
    self.final_cycle = final_cycle
    self.entry_id = entry_id
    self.cmd_id = cmd_id
    self.params = params

  def get_dependencies(,self):
    """the label to show in the pending portion"""
    # if in same queue, list the latest one accepted before it
    # - all issues must be in same order, and all finals must be in same order
    # if in different queue but RAW, RAW, or WAW (dram OR spad) point to it
    # - all issues must come after final of dependency

  @abstractmethod
  def pending_label(self):
    """the label to show in the pending portion"""
    pass

  @abstractmethod
  def active_label(self):
    """the label to show in the active portion"""
    pass

class ExCommand(GemminiCommand):



#=============================================================================
if __name__ == "__main__":
  if len(sys.argv) < 1:
    print_usage()

  # parse inputs
  in_file = sys.argv[1]
  out_file = sys.argv[2]
  trigger = re.compile(".*`ifdef PRINTF_COND.*")
  targets = []
  for idx in range(3, len(sys.argv)):
    targets.append(re.compile(sys.argv[idx]))

  # read input lines
  in_lines = []
  with open(in_file, "r") as f:
    in_lines = f.readlines()

  # enable PRINTF_COND lines around points of interest
  enables = 0
  out_lines = []
  idx = 0
  idx_end = len(in_lines)
  while(idx < idx_end):
    if trigger.match(in_lines[idx]):
      matches_target = False
      for target in targets:
        if target.match(in_lines[idx+4]):
          matches_target = True
          break
      if matches_target:
        enables += 1
        out_lines += in_lines[idx+3:idx+6]
      else:
        out_lines += in_lines[idx:idx+9]
      idx += 9
    else:
      out_lines.append(in_lines[idx])
      idx += 1

  # write to output file
  with open(out_file, "w") as f:
    f.writelines(out_lines)

  print(f"INFO: enabled {enables} printfs in {out_file}")

if __name__ == "__main__":
  if len(sys.argv


  # parse args

  #read file

  #filter lines and convert to data-structure

  #convert data-structure to json

  #write json to stdout

