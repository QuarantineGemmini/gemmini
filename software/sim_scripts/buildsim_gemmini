#!/bin/bash

set -euo pipefail

#=============================================================================
# setup notes
#=============================================================================
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
SW_DIR="$(dirname "$DIR")"
FCFG_DIR="$SW_DIR/firesim-configs"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
source "$DIR/.common.sh"

# set simulator dirs
VCS_DIR="$CY_DIR/sims/vcs"
VERILATOR_DIR="$CY_DIR/sims/verilator"
FIRESIM_DIR="$CY_DIR/sims/firesim"

# general simulator options
HW_CONFIG_PROJECT=example

# available hardware-configs (vcs,verilator)
HW_CONFIG_LAB3=GemminiEE290Lab3RocketConfig
HW_CONFIG_G2=Gemmini2EE290Lab3RocketConfig

# gemmini1 DSEs
HW_CONFIG_G1_DSE5=Gemminidim16sp64acc16bus128
HW_CONFIG_G1_DSE6=Gemminidim32sp64acc16bus128
HW_CONFIG_G1_DSE7=Gemminidim16sp16acc64bus128
HW_CONFIG_G1_DSE8=Gemminidim32sp16acc64bus128

# gemmini2 DSEs
HW_CONFIG_G2_DSE1=Gemmini2dim16sp64acc16bus064
HW_CONFIG_G2_DSE2=Gemmini2dim32sp64acc16bus064
HW_CONFIG_G2_DSE3=Gemmini2dim16sp16acc64bus064
HW_CONFIG_G2_DSE4=Gemmini2dim32sp16acc64bus064
HW_CONFIG_G2_DSE5=Gemmini2dim16sp64acc16bus128
HW_CONFIG_G2_DSE6=Gemmini2dim32sp64acc16bus128
HW_CONFIG_G2_DSE7=Gemmini2dim16sp16acc64bus128
HW_CONFIG_G2_DSE8=Gemmini2dim32sp16acc64bus128

# FgGemmini2 DSEs
HW_CONFIG_FG_DSE1=FgGemmini2dim32fg32
HW_CONFIG_FG_DSE2=FgGemmini2dim32fg16
HW_CONFIG_FG_DSE3=FgGemmini2dim32fg8
HW_CONFIG_FG_DSE4=FgGemmini2dim16fg16
HW_CONFIG_FG_DSE5=FgGemmini2dim16fg8
HW_CONFIG_FG_DSE6=FgGemmini2dim16fg4

# firesim configs
FSIM_BUILD_CONFIG="$FCFG_DIR/config_build.ini"
FSIM_RECIPES_CONFIG="$FCFG_DIR/config_build_recipes.ini"

# make sure the software workloads don't have broken makefiles
export MAKEFLAGS="${MAKEFLAGS:-} --warn-undefined-variables"

#=============================================================================
# defaults
#=============================================================================
IS_NOISY=0
IS_DEBUG=0
IS_FORCE=0

VL8_THREADS=1
VL8_PROFILE=none
VL8_FST_MODE=0

VCS_THREADS="$(cat /proc/cpuinfo | grep '^processor' | wc -l)"
VCS_PROFILE=0

# this PRINTF pattern only prints the ROB accept/issue/final events
#export ENABLE_PRINTF_PATTERN='.*\"cycle.*entry.*(accept|issue|final)\[.*'
#export ENABLE_PRINTF_PATTERN='.*G2-PERF'
export ENABLE_PRINTF_PATTERN='.*(G2-PERF|\"cycle.*entry.*(accept|issue|final)\[).*'
#export ENABLE_PRINTF_PATTERN=''

# default hardware config (vcs,verilator)
HW_CONFIG="hw_lab3"
HW_CONFIG_FULL="$HW_CONFIG_LAB3"

#=============================================================================
# subroutines
#=============================================================================
display_usage() {
  cat <<EOF

  buildsim_gemmini [options] <simulator> [[options] <simluator> ...]
  --------------------------------------------------------
  Utility to build simulators for various gemmini configurations. Output 
  simulators will be placed in their respective directories. 

  Available simulators
  --------------------
  verilator: build configs with verilator compiler (default)
  vcs:       build configs with vcs compiler 
  firesim:   build configs with firesim (on manager node). make sure
             you update the config_build.ini and config_build_recipes.ini
             files before building!

  hardware configs (vcs, verilator)
  --------------------------------
  -hw_lab3      --> build $HW_CONFIG_LAB3 (default)
  -hw_g2        --> build $HW_CONFIG_G2

  -hw_g1_dse5   --> build $HW_CONFIG_G1_DSE5
  -hw_g1_dse6   --> build $HW_CONFIG_G1_DSE6
  -hw_g1_dse7   --> build $HW_CONFIG_G1_DSE7
  -hw_g1_dse8   --> build $HW_CONFIG_G1_DSE8

  -hw_g2_dse1   --> build $HW_CONFIG_G2_DSE1
  -hw_g2_dse2   --> build $HW_CONFIG_G2_DSE2
  -hw_g2_dse3   --> build $HW_CONFIG_G2_DSE3
  -hw_g2_dse4   --> build $HW_CONFIG_G2_DSE4
  -hw_g2_dse5   --> build $HW_CONFIG_G2_DSE5
  -hw_g2_dse6   --> build $HW_CONFIG_G2_DSE6
  -hw_g2_dse7   --> build $HW_CONFIG_G2_DSE7
  -hw_g2_dse8   --> build $HW_CONFIG_G2_DSE8

  -hw_fg_dse1   --> build $HW_CONFIG_FG_DSE1
  -hw_fg_dse2   --> build $HW_CONFIG_FG_DSE2
  -hw_fg_dse3   --> build $HW_CONFIG_FG_DSE3
  -hw_fg_dse4   --> build $HW_CONFIG_FG_DSE4
  -hw_fg_dse5   --> build $HW_CONFIG_FG_DSE5
  -hw_fg_dse6   --> build $HW_CONFIG_FG_DSE6
  
  verilator options 
  -----------------
  -vl8_threads <t>  
                --> how many threads verilated simulator use [$VL8_THREADS]
  -vl8_profile <all|threads>
                --> if 'threads', the simulator will output a multi-threading
                    efficiency report. use verilator_gantt to view it. 'all'
                    makes the simulator output profiling data for gprof in 
                    addition to 'threads' profiling data.
  -vl8_fst_mode --> only valid if -debug is used. generate fst instead of vcd

  vcs options 
  -----------
  -vcs_profile  --> make the simulator output profiling data for gprof. NOTE:
                    this is pretty useless since vcs-generated C code is 
                    obfuscated.

  other options
  -------------
  -force        --> force remove simulator output files (not firrtl though)
  -noisy        --> print to stdout as well as the logfile
  -debug        --> compile a debug-mode simulator
  -printf <pat> --> python regex pattern for printf() strings to selectively 
                    set to verbose mode in the simulator.
                    default is: '$ENABLE_PRINTF_PATTERN'
  -h|help       --> display this help

  examples
  --------
  buildsim_gemmini -hw_lab3 verilator
  buildsim_gemmini -noisy -force -debug vcs
  buildsim_gemmini -noisy firesim

EOF
  exit 1
}

#=============================================================================
# run
#=============================================================================
buildsim() {
  local sim_type="$1"

  # init local variables
  local ts="$(date "+%Y-%m-%d_%H-%M-%S")"
  local compile_name="${ts}__compile__${sim_type}__${HW_CONFIG}"
  local starttime=$SECONDS

  #-------------------------------------------------------------------------
  case $sim_type in
    vcs)
      # rundir/logging setup
      cd "$VCS_DIR"
      local logdir="$VCS_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # compiler options
      local cmdline="make CONFIG=$HW_CONFIG_FULL"
      local cmdline="$cmdline VCS_THREADS=$VCS_THREADS"
      local cmdline="$cmdline VCS_PROFILE=$VCS_PROFILE"
      if [ "$IS_DEBUG" -eq 1 ]; then cmdline="$cmdline debug"; fi

      # clean up files if force-rebuild
      if [ "$IS_FORCE" -eq 1 ]; then
        for f in simv-*-$HW_CONFIG_FULL* ucli.key vc_hdrs.h \
            simv-*.daidir/.vcs.timestamp \
            generated-src/*.$HW_CONFIG_FULL/*.printf*.v ; do
          finfo "force removing $f" "$logfile"
          rm -fr $f
        done
      fi
      ;;
    verilator)
      # rundir/logging setup
      cd "$VERILATOR_DIR"
      local logdir="$VERILATOR_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # compiler options
      local cmdline="make CONFIG=$HW_CONFIG_FULL"
      local cmdline="$cmdline VL8_THREADS=$VL8_THREADS"
      local cmdline="$cmdline VL8_PROFILE=$VL8_PROFILE"
      local cmdline="$cmdline VL8_FST_MODE=$VL8_FST_MODE"
      if [ "$IS_DEBUG" -eq 1 ]; then cmdline="$cmdline debug"; fi

      # clean up files if force-rebuild
      if [ "$IS_FORCE" -eq 1 ]; then
        for f in simulator-${HW_CONFIG_PROJECT}-$HW_CONFIG_FULL* \
            generated-src/*.*.$HW_CONFIG_FULL/*.*.$HW_CONFIG_FULL \
            generated-src/*.*.$HW_CONFIG_FULL/*.printf*.v ; do
          finfo "force removing $f" "$logfile"
          rm -fr "$f"
        done
      fi
      ;;
    firesim)
      # rundir/logging setup
      cd "$FIRESIM_DIR"
      local logdir="$FIRESIM_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # compiler options
      local cmdline="firesim buildafi"
      local cmdline="$cmdline -b $FSIM_BUILD_CONFIG -r $FSIM_RECIPES_CONFIG"

      # clean up files if force-rebuild
      if [ "$IS_FORCE" -eq 1 ]; then
        finfo "force option is a no-op for firesim!" "$logfile"
      fi
      ;;
    *)
      err "invalid sim_type: $sim_type"
      ;;
  esac
  finfo "$compile_name started" "$logfile"
  #-------------------------------------------------------------------------
  if [ "$IS_NOISY" -eq 1 ]; then 
    set -x
    $cmdline |& tee -a "$logfile"
    set +x
  else 
    $cmdline &>> "$logfile"
  fi
  #-------------------------------------------------------------------------
  totaltime=$(( $SECONDS-$starttime ))
  finfo "$compile_name finished in $totaltime seconds" "$logfile"
}

#=============================================================================
# configuration
#=============================================================================
cd "$DIR"

if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    #------------------------------------------------------------------------
    -hw_lab3)    HW_CONFIG="hw_lab3";    HW_CONFIG_FULL="$HW_CONFIG_LAB3"   ;;
    -hw_g2)      HW_CONFIG="hw_g2";      HW_CONFIG_FULL="$HW_CONFIG_G2"     ;;

    -hw_g1_dse5) HW_CONFIG="hw_g1_dse5"; HW_CONFIG_FULL="$HW_CONFIG_G1_DSE5";;
    -hw_g1_dse6) HW_CONFIG="hw_g1_dse6"; HW_CONFIG_FULL="$HW_CONFIG_G1_DSE6";;
    -hw_g1_dse7) HW_CONFIG="hw_g1_dse7"; HW_CONFIG_FULL="$HW_CONFIG_G1_DSE7";;
    -hw_g1_dse8) HW_CONFIG="hw_g1_dse8"; HW_CONFIG_FULL="$HW_CONFIG_G1_DSE8";;

    -hw_g2_dse1) HW_CONFIG="hw_g2_dse1"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE1";;
    -hw_g2_dse2) HW_CONFIG="hw_g2_dse2"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE2";;
    -hw_g2_dse3) HW_CONFIG="hw_g2_dse3"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE3";;
    -hw_g2_dse4) HW_CONFIG="hw_g2_dse4"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE4";;
    -hw_g2_dse5) HW_CONFIG="hw_g2_dse5"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE5";;
    -hw_g2_dse6) HW_CONFIG="hw_g2_dse6"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE6";;
    -hw_g2_dse7) HW_CONFIG="hw_g2_dse7"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE7";;
    -hw_g2_dse8) HW_CONFIG="hw_g2_dse8"; HW_CONFIG_FULL="$HW_CONFIG_G2_DSE8";;

    -hw_fg_dse1) HW_CONFIG="hw_fg_dse1"; HW_CONFIG_FULL="$HW_CONFIG_FG_DSE1";;
    -hw_fg_dse2) HW_CONFIG="hw_fg_dse2"; HW_CONFIG_FULL="$HW_CONFIG_FG_DSE2";;
    -hw_fg_dse3) HW_CONFIG="hw_fg_dse3"; HW_CONFIG_FULL="$HW_CONFIG_FG_DSE3";;
    -hw_fg_dse4) HW_CONFIG="hw_fg_dse4"; HW_CONFIG_FULL="$HW_CONFIG_FG_DSE4";;
    -hw_fg_dse5) HW_CONFIG="hw_fg_dse5"; HW_CONFIG_FULL="$HW_CONFIG_FG_DSE5";;
    -hw_fg_dse6) HW_CONFIG="hw_fg_dse6"; HW_CONFIG_FULL="$HW_CONFIG_FG_DSE6";;
    #------------------------------------------------------------------------
    -vl8_threads)
      if [ $# -eq 0 ] ; then err "-vl8_threads requires arg. see usage"; fi
      VL8_THREADS=$1; shift
      ;;
    -vl8_profile)
      if [ $# -eq 0 ] ; then err "-vl8_profile requires arg. see usage"; fi
      case $1 in
        all|threads) VL8_PROFILE=$1; shift;;
        *) err "-vl8_profile got invalid arg $1. see usage" ;;
      esac
      ;;
    -vl8_fst_mode) VL8_FST_MODE=1 ;;
    #------------------------------------------------------------------------
    -vcs_profile) VCS_PROFILE=1 ;;
    #------------------------------------------------------------------------
    -noisy) IS_NOISY=1 ;;
    -force) IS_FORCE=1 ;;
    -debug) IS_DEBUG=1 ;;
    -printf)
      if [ $# -eq 0 ] ; then err "-printf requires arg. see usage"; fi
      export ENABLE_PRINTF_PATTERN="$1"; shift
      ;;
    -h|-help) display_usage ;;
    #------------------------------------------------------------------------
    vcs)       buildsim "vcs" ;;
    verilator) buildsim "verilator" ;;
    firesim)   buildsim "firesim" ;;
    #------------------------------------------------------------------------
    *) err "invalid option: $arg" ;;
  esac
done
