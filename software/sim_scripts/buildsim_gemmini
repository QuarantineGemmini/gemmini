#!/bin/bash

set -euo pipefail

#=============================================================================
# setup notes
#=============================================================================
# this builds variations of each simulator for your gemmini simulations
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
#source "$CY_DIR/sourceme.sh"

# set simulator dirs
VCS_DIR="$CY_DIR/sims/vcs"
VERILATOR_DIR="$CY_DIR/sims/verilator"
FIRESIM_DIR="$CY_DIR/sims/firesim"
SPIKE_DIR="$CY_DIR/sims/spike"

# TODO: clean up multiple projects (or will they all be example?)
# general simulator options
HW_CONFIG_PROJECT=example

# for eecs290-2 lab3
CONFIG_LAB3=GemminiEE290Lab3RocketConfig

#=============================================================================
# defaults
#=============================================================================
IS_NOISY=0
IS_DEBUG=0
IS_FORCE=0
SIM_TYPE="spike"

VL8_CPU_HOG=0

# for selective verbose printfs, used by simulator Makefiles
export ENABLE_PRINTF_PATTERN='.*\"cycle.*entry.*(accept|issue|final)\[.*'

#=============================================================================
# subroutines
#=============================================================================
err() { echo "[ERROR]: $@"; exit 1; }
info() { echo "[INFO]: $@"; }

display_usage() {
  cat <<EOF

  buildsim_gemmini [options] <cfg1> [options] [<cfg2> ...]
  --------------------------------------------------------
  Utility to build simulators for various gemmini configurations. By default
  it assumes the spike simulator (nothing to be done). Output simulators
  will be placed in the respective directories. 
  Available configurations are:
    lab3: $CONFIG_LAB3
    
  simulator
  ---------
  -spike        --> build all following configs from spike compiler (no-op)
  -vcs          --> build all following configs from vcs compiler
  -verilator    --> build all following configs from verilator compiler
  -firesim      --> build all following configs from firesim (on manager node)

  verilator options 
  -----------------
  -vl8_cpu_hog  --> no threads will yield to the cpu. make sure your the only
                    one on your machine if you do this!

  other options
  -------------
  -no_force     --> let make/simulator determine if out of date (default)
  -force        --> force remove simulator output files (not firrtl though)
  -no_noisy     --> only print to logfile (default)
  -noisy        --> print to stdout as well as the logfile
  -no_debug     --> don't compile a debug-simulator (default)
  -debug        --> compile a debug-mode simulator
  -printf <pat> --> python regex pattern for printf() strings to selectively 
                    set to verbose mode in the simulator (no-op for spike).
                    default is: '$ENABLE_PRINTF_PATTERN'
  -h|help       --> display this help

EOF
  exit 1
}

#=============================================================================
# build 
#=============================================================================
buildsim() {
  local config_name="$1"
  local ts="$(date "+%Y-%m-%d_%H:%M:%S")"
  local compile_name="${ts}_compile_${SIM_TYPE}_${config_name}"
  local starttime=$SECONDS

  info "$compile_name started"
  #------------------------
  case $SIM_TYPE in
    spike)
      info "spike is a no-op!"
      ;;
    vcs)
      local logdir="$VCS_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      local cmdline="make CONFIG=$config_name"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$VCS_DIR"

      if [ "$IS_FORCE" -eq 1 ]; then
        for f in simv-*-$config_name* *.daidir/.vcs.timestamp \
						generated-src/*.$config_name/*.printf*.v ; do
          info "force removing $f"
          rm -fr $f
        done
      fi
      if [ "$IS_DEBUG" -eq 1 ]; then 
        cmdline="$cmdline debug"
      fi
      if [ "$IS_NOISY" -eq 1 ]; then 
        set -x
        $cmdline |& tee "$logfile"
        set +x
      else 
        $cmdline &> "$logfile"
      fi
      ;;
    verilator)
      local logdir="$VERILATOR_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      local cmdline="make CONFIG=$config_name"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi
      cd "$VERILATOR_DIR"

      # determine which verilator multithread version to use
      local vl8_src_dir="$VERILATOR_DIR/verilator_install/src/verilator-4.016"
      local vl8_dst_dir="$VERILATOR_DIR/verilator_install/install/share/verilator"
      local vl8_mt_dst_h="${vl8_dst_dir}/include/verilated_threads.h"
      local vl8_mt_src_h="${vl8_src_dir}/include/verilated_threads.h"
      local vl8_mt_new_h="$VERILATOR_DIR/patch/verilated_threads.h"
      rm -f "$vl8_mt_dst_h"
      if [ "$VL8_CPU_HOG" -eq 1 ]; then cp "$vl8_mt_new_h" "$vl8_mt_dst_h"; 
      else  cp "$vl8_mt_src_h" "$vl8_mt_dst_h"; fi

      if [ "$IS_FORCE" -eqr1 ]; then
        for f in simulator-${HW_CONFIG_PROJECT}-$config_name* \
            generated-src/*.*.$config_name/*.*.$config_name \
						generated-src/*.*.$config_name/*.printf*.v ; do
          info "force removing $f"
          rm -fr $f
        done
      fi
      if [ "$IS_DEBUG" -eq 1 ]; then 
        cmdline="$cmdline debug"
      fi
      if [ "$IS_NOISY" -eq 1 ]; then 
        set -x
        $cmdline |& tee "$logfile"
        set +x
      else 
        $cmdline &> "$logfile"
      fi
      ;;
    firesim)
      err "firesim not supported yet"
      ;;
    *)
      err "invalid SIM_TYPE: $SIM_TYPE"
      ;;
  esac
  #------------------------
  totaltime=$(( $SECONDS-$starttime ))
  info "$compile_name finished in $totaltime seconds"
}

#=============================================================================
# configuration
#=============================================================================
cd "$DIR"

if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    #------------------------------------------------------------------------
    -spike)     SIM_TYPE="spike" ;;
    -vcs)       SIM_TYPE="vcs" ;;
    -verilator) SIM_TYPE="verilator" ;;
    -firesim)   SIM_TYPE="firesim" ;;
    #------------------------------------------------------------------------
    -vl8_cpu_hog) VL8_CPU_HOG=1 ;;
    #------------------------------------------------------------------------
    -force)     IS_FORCE=1 ;;
    -no_force)  IS_FORCE=0 ;;
    -noisy)     IS_NOISY=1 ;;
    -no_noisy)  IS_NOISY=0 ;;
    -debug)     IS_DEBUG=1 ;;
    -no_debug)  IS_DEBUG=0 ;;
    -printf)
      if [ $# -eq 0 ] ; then err "-printf requires arg. see usage"; fi
      export ENABLE_PRINTF_PATTERN="$1"
      ;;
    -h|-help) display_usage ;;
    #------------------------------------------------------------------------
    lab3) buildsim "$CONFIG_LAB3" ;;
    #------------------------------------------------------------------------
    *) err "invalid option: $arg" ;;
  esac
done
