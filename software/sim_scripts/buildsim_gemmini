#!/bin/bash

set -euo pipefail

#=============================================================================
# setup notes
#=============================================================================
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
CY_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$DIR")")")")"
source "$DIR/.common.sh"

# set simulator dirs
VCS_DIR="$CY_DIR/sims/vcs"
VERILATOR_DIR="$CY_DIR/sims/verilator"
FIRESIM_DIR="$CY_DIR/sims/firesim"

# TODO: clean up multiple projects (or will they all be example?)
# general simulator options
HW_CONFIG_PROJECT=example

# for eecs290-2 lab3
CONFIG_LAB3=GemminiEE290Lab3RocketConfig

# make sure the software workloads don't have broken makefiles
export MAKEFLAGS="${MAKEFLAGS:-} --warn-undefined-variables"

#=============================================================================
# defaults
#=============================================================================
IS_NOISY=0
IS_DEBUG=0
IS_FORCE=0
SIM_TYPE="verilator"

VL8_THREADS=1
VL8_PROFILE=none
VL8_FST_MODE=0

VCS_THREADS="$(cat /proc/cpuinfo | grep '^processor' | wc -l)"
VCS_PROFILE=0

# this PRINTF pattern only prints the ROB accept/issue/final events
#export ENABLE_PRINTF_PATTERN='.*\"cycle.*entry.*(accept|issue|final)\[.*'
export ENABLE_PRINTF_PATTERN=''

#=============================================================================
# subroutines
#=============================================================================
display_usage() {
  cat <<EOF

  buildsim_gemmini [options] <cfg1> [options] [<cfg2> ...]
  --------------------------------------------------------
  Utility to build simulators for various gemmini configurations. By default
  it assumes the $SIM_TYPE simulator. Output simulators will be placed in 
  their respective directories. 
  Available configurations are:
    lab3: $CONFIG_LAB3
    
  simulator
  ---------
  -verilator    --> build configs with verilator compiler (default)
  -vcs          --> build configs with vcs compiler 
  -firesim      --> build configs with firesim (on manager node)

  verilator options 
  -----------------
  -vl8_threads <t>  
                --> how many threads verilated simulator use [$VL8_THREADS]
  -vl8_profile <all|threads>
                --> if 'threads', the simulator will output a multi-threading
                    efficiency report. use verilator_gantt to view it. if 'all', 
                    make the simulator output profiling data for gprof in 
                    addition to 'threads' profiling data.
  -vl8_fst_mode --> only valid if -debug is used. generate fst instead of vcd

  vcs options 
  -----------
  -vcs_profile  --> make the simulator output profiling data for gprof. NOTE:
                    this is pretty useless since vcs-generated C code is 
                    obfuscated.

  other options
  -------------
  -no_force     --> let make/simulator determine if out of date (default)
  -force        --> force remove simulator output files (not firrtl though)
  -no_noisy     --> only print to logfile (default)
  -noisy        --> print to stdout as well as the logfile
  -no_debug     --> don't compile a debug-simulator (default)
  -debug        --> compile a debug-mode simulator
  -printf <pat> --> python regex pattern for printf() strings to selectively 
                    set to verbose mode in the simulator.
                    default is: '$ENABLE_PRINTF_PATTERN'
  -h|help       --> display this help

EOF
  exit 1
}

#=============================================================================
# run
#=============================================================================
buildsim() {
  local config_name="$1"

  # init local variables
  local ts="$(date "+%Y-%m-%d_%H-%M-%S")"
  local compile_name="${ts}__compile__${SIM_TYPE}__${config_name}"
  local starttime=$SECONDS

  #-------------------------------------------------------------------------
  case $SIM_TYPE in
    vcs)
      # rundir/logging setup
      cd "$VCS_DIR"
      local logdir="$VCS_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # compiler options
      local cmdline="make CONFIG=$config_name"
      local cmdline="$cmdline VCS_THREADS=$VCS_THREADS"
      local cmdline="$cmdline VCS_PROFILE=$VCS_PROFILE"
      if [ "$IS_DEBUG" -eq 1 ]; then cmdline="$cmdline debug"; fi

      # clean up files if force-rebuild
      if [ "$IS_FORCE" -eq 1 ]; then
        for f in simv-*-$config_name* ucli.key vc_hdrs.h \
            simv-*.daidir/.vcs.timestamp \
            generated-src/*.$config_name/*.printf*.v ; do
          finfo "force removing $f" "$logfile"
          rm -fr $f
        done
      fi
      ;;
    verilator)
      # rundir/logging setup
      cd "$VERILATOR_DIR"
      local logdir="$VERILATOR_DIR/logs"
      local logfile="${logdir}/${compile_name}.log"
      if [ ! -d "$logdir" ]; then mkdir -p "$logdir" ; fi

      # compiler options
      local cmdline="make CONFIG=$config_name"
      local cmdline="$cmdline VL8_THREADS=$VL8_THREADS"
      local cmdline="$cmdline VL8_PROFILE=$VL8_PROFILE"
      local cmdline="$cmdline VL8_FST_MODE=$VL8_FST_MODE"
      if [ "$IS_DEBUG" -eq 1 ]; then cmdline="$cmdline debug"; fi

      # clean up files if force-rebuild
      if [ "$IS_FORCE" -eq 1 ]; then
        for f in simulator-${HW_CONFIG_PROJECT}-$config_name* \
            generated-src/*.*.$config_name/*.*.$config_name \
            generated-src/*.*.$config_name/*.printf*.v ; do
          finfo "force removing $f" "$logfile"
          rm -fr "$f"
        done
      fi
      ;;
    firesim)
      err "firesim not supported yet"
      ;;
    *)
      err "invalid SIM_TYPE: $SIM_TYPE"
      ;;
  esac
  finfo "$compile_name started" "$logfile"
  #-------------------------------------------------------------------------
  if [ "$IS_NOISY" -eq 1 ]; then 
    set -x
    $cmdline |& tee -a "$logfile"
    set +x
  else 
    $cmdline &>> "$logfile"
  fi
  #-------------------------------------------------------------------------
  totaltime=$(( $SECONDS-$starttime ))
  finfo "$compile_name finished in $totaltime seconds" "$logfile"
}

#=============================================================================
# configuration
#=============================================================================
cd "$DIR"

if [ $# -eq 0 ] ; then display_usage; fi

while [ $# -ne 0 ] ; do
  arg=$1; shift;
  case $arg in
    #------------------------------------------------------------------------
    -vcs)       SIM_TYPE="vcs" ;;
    -verilator) SIM_TYPE="verilator" ;;
    -firesim)   SIM_TYPE="firesim" ;;
    #------------------------------------------------------------------------
    -vl8_threads)
      if [ $# -eq 0 ] ; then err "-vl8_threads requires arg. see usage"; fi
      VL8_THREADS=$1; shift
      ;;
    -vl8_profile)
      if [ $# -eq 0 ] ; then err "-vl8_profile requires arg. see usage"; fi
      case $1 in
        all|threads) VL8_PROFILE=$1; shift;;
        *) err "-vl8_profile got invalid arg $1. see usage" ;;
      esac
      ;;
    -vl8_fst_mode) VL8_FST_MODE=1 ;;
    #------------------------------------------------------------------------
    -vcs_profile) VCS_PROFILE=1 ;;
    #------------------------------------------------------------------------
    -vl8_fst_mode) VL8_FST_MODE=1 ;;
    -noisy)     IS_NOISY=1 ;;
    -no_noisy)  IS_NOISY=0 ;;
    -force)     IS_FORCE=1 ;;
    -no_force)  IS_FORCE=0 ;;
    -debug)     IS_DEBUG=1 ;;
    -no_debug)  IS_DEBUG=0 ;;
    -printf)
      if [ $# -eq 0 ] ; then err "-printf requires arg. see usage"; fi
      export ENABLE_PRINTF_PATTERN="$1"; shift
      ;;
    -h|-help) display_usage ;;
    #------------------------------------------------------------------------
    lab3) buildsim "$CONFIG_LAB3" ;;
    #------------------------------------------------------------------------
    *) err "invalid option: $arg" ;;
  esac
done
